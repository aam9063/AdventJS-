/*
Los elfos estÃ¡n jugando con un tren ðŸš‚ mÃ¡gico que transporta regalos. Este tren se mueve en un tablero representado por un array de strings.

El tren estÃ¡ compuesto por una locomotora (@), seguida de sus vagones (o), y debe recoger frutas mÃ¡gicas (*) que le sirve de combustible. El movimiento del tren sigue las siguientes reglas:

RecibirÃ¡s dos parÃ¡metros board y mov.

board es un array de strings que representa el tablero:

@ es la locomotora del tren.
o son los vagones del tren.
* es una fruta mÃ¡gica.
Â· son espacios vacÃ­os.
mov es un string que indica el prÃ³ximo movimiento del tren desde la cabeza del tren @:

'L': izquierda
'R': derecha
'U': arriba
'D': abajo.
Con esta informaciÃ³n, debes devolver una cadena de texto:

'crash': Si el tren choca contra los bordes del tablero o contra sÃ­ mismo.
'eat': Si el tren recoge una fruta mÃ¡gica (*).
'none': Si avanza sin chocar ni recoger ninguna fruta mÃ¡gica.
Ejemplo:

const board = [
  'Â·Â·Â·Â·Â·',
  '*Â·Â·Â·Â·',
  '@Â·Â·Â·Â·',
  'oÂ·Â·Â·Â·',
  'oÂ·Â·Â·Â·'
]

console.log(moveTrain(board, 'U'))
âžž 'eat'
Porque el tren se mueve hacia arriba y encuentra una fruta mÃ¡gica

console.log(moveTrain(board, 'D'))
âžž 'crash'
El tren se mueve hacia abajo y la cabeza se choca consigo mismo

console.log(moveTrain(board, 'L'))
âžž 'crash'
El tren se mueve a la izquierda y se choca contra la pared

console.log(moveTrain(board, 'R'))
âžž 'none'
El tren se mueve hacia derecha y hay un espacio vacÃ­o en la derecha
*/

/**
 * Mueve la locomotora (@) una posiciÃ³n segÃºn la direcciÃ³n mov. 
 * Si en la nueva posiciÃ³n estÃ¡ la fruta (*), devolvemos "eat".
 * Si salimos del tablero o chocamos con el propio tren (o/@), devolvemos "crash".
 * En otro caso, devolvemos "none".
 * 
 * @param {string[]} board - Array de strings que representa el tablero
 * @param {'U' | 'D' | 'R' | 'L' } mov - DirecciÃ³n de movimiento
 * @returns {'none' | 'crash' | 'eat'} - Resultado del movimiento
 */

function moveTrain(board, mov) {
  const directions = {
    U: (row, col) => board[row - 1]?.[col],
    D: (row, col) => board[row + 1]?.[col],
    R: (row, col) => board[row][col + 1],
    L: (row, col) => board[row][col - 1],
  };

  const flatBoard = board.join('');
  const trainHeadIndex = flatBoard.indexOf('@');

  const totalColumns = board[0].length;
  const currentRow = Math.floor(trainHeadIndex / totalColumns);
  const currentColumn = trainHeadIndex % totalColumns;

  const nextCell = directions[mov](currentRow, currentColumn);

  const results = {
    '*': 'eat',
    'Â·': 'none',
  };

  return results[nextCell] || 'crash';
}

  