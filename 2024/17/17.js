/*
El Grinch ha estado haciendo de las suyas en el Polo Norte y ha sembrado bombas de carbÃ³n explosivo ðŸ’£ en la fÃ¡brica 
de juguetes de los duendes. Quiere que todos los juguetes queden inutilizados y por eso ha dejado una cuadrÃ­cula donde 
algunas celdas tienen carbÃ³n explosivo (true) y otras estÃ¡n vacÃ­as (false).

Los duendes necesitan tu ayuda para mapear las zonas peligrosas. Cada celda vacÃ­a debe mostrar un nÃºmero que indique 
cuÃ¡ntas bombas de carbÃ³n explosivo hay en las posiciones adyacentes, incluidas las diagonales.

detectBombs([
  [true, false, false],
  [false, true, false],
  [false, false, false]
])
[
  [1, 2, 1],
  [2, 1, 1],
  [1, 1, 1]
]

detectBombs([
  [true, false],
  [false, false]
])
[
  [0, 1],
  [1, 1]
]

detectBombs([
  [true, true],
  [false, false],
  [true, true]
])

[
  [1, 1],
  [4, 4],
  [1, 1]
]
Nota: Â¿Quieres una pista? Seguro que has jugado al juego de buscaminas antesâ€¦ ðŸ˜‰
*/

/**
 * Dado un grid booleano, donde true es bomba y false es vacÃ­o,
 * para cada celda se debe indicar cuÃ¡ntas bombas hay en sus
 * celdas vecinas (incluyendo diagonales).
 *
 * @param {boolean[][]} grid - Matriz que indica dÃ³nde hay bombas
 * @returns {number[][]} - Matriz con las cantidades de bombas vecinas
 */

function detectBombs(grid) {
  const neighborOffsets = [-1, 0, 1];

  return grid.map((row, rowIndex) =>
    row.map((_, colIndex) => {
      const adjacentBombsCount = neighborOffsets.reduce(
        (totalBombs, rowOffset) =>
          totalBombs +
          neighborOffsets.reduce((bombsInColumn, colOffset) => {
            const neighborRow = rowIndex + rowOffset;
            const neighborCol = colIndex + colOffset;
            const isBomb = grid[neighborRow]?.[neighborCol];
            return bombsInColumn + (isBomb ? 1 : 0);
          }, 0),
        0,
      );

      return adjacentBombsCount - (grid[rowIndex][colIndex] ? 1 : 0);
    }),
  );
}

// Ejemplos
console.log(
  detectBombs([
    [true, false, false],
    [false, true, false],
    [false, false, false],
  ]),
); // [[1, 2, 1], [2, 1, 1], [1, 1, 1]]

console.log(
  detectBombs([
    [true, false],
    [false, false],
  ]),
); // [[0, 1], [1, 1]]  

console.log(
  detectBombs([
    [true, true],
    [false, false],
    [true, true],
  ]),
); // [[1, 1], [4, 4], [1, 1]]