/*
¬°Es hora de seleccionar a los renos m√°s r√°pidos para los viajes de Santa! ü¶åüéÑ
Santa Claus ha organizado unas emocionantes carreras de renos para decidir cu√°les est√°n en mejor forma.

Tu tarea es mostrar el progreso de cada reno en una pista de nieve en formato isom√©trico.

La informaci√≥n que recibes:

indices: Un array de enteros que representan el progreso de cada reno en la pista:
0: El carril est√° vac√≠o.
N√∫mero positivo: La posici√≥n actual del reno desde el inicio de la pista.
N√∫mero negativo: La posici√≥n actual del reno desde el final de la pista.
length: La longitud de cada carril.
Devuelve un string que represente la pista de la carrera:

Cada carril tiene exactamente length posiciones llenas de nieve (~).
Cada reno se representa con la letra r.
Los carriles est√°n numerados al final con /1, /2, etc.
La vista es isom√©trica, por lo que los carriles inferiores est√°n desplazados hacia la derecha.
Ejemplos:

drawRace([0, 5, -3], 10)
  ~~~~~~~~~~ /1
 ~~~~~r~~~~ /2
~~~~~~~r~~ /3

drawRace([2, -1, 0, 5], 8)
   ~~r~~~~~ /1
  ~~~~~~~r /2
 ~~~~~~~~ /3
~~~~~r~~ /4

drawRace([3, 7, -2], 12)
  ~~~r~~~~~~~~ /1
 ~~~~~~~r~~~~ /2
~~~~~~~~~~r~ /3
*/

/**
 * Dibuja una carrera de renos en vista isom√©trica.
 * 
 * @param {number[]} indices - Array con la posici√≥n de cada reno:
 *   -  0  => no hay reno en ese carril
 *   -  >0 => posici√≥n desde el inicio (0-based)
 *   -  <0 => posici√≥n desde el final (p.ej. -1 => √∫ltima posici√≥n)
 * @param {number} length - Longitud de cada carril (n√∫mero de '~')
 * @returns {string} - Un dibujo en forma de pista con los renos
 */
function drawRace(indices, length) {
  const totalRenos = indices.length;
  const rows = [];

  for (let i = 0; i < totalRenos; i++) {
    // Calculamos la cantidad de espacios al inicio de la fila para la vista isom√©trica
    const offset = totalRenos - 1 - i; 

    // Creamos un array con '~' de longitud "length"
    const track = Array.from({ length }, () => '~');

    // Sacamos la posici√≥n del reno para este carril
    const pos = indices[i];

    // Si pos === 0 => no hay reno en este carril
    // Si pos > 0 => posici√≥n desde el inicio, 0-based
    // Si pos < 0 => posici√≥n desde el final
    if (pos !== 0) {
      let index;
      if (pos > 0) {
        index = pos; 
      } else {
        index = length + pos; 
      }

      // Validamos que el √≠ndice est√© dentro de la pista
      if (index >= 0 && index < length) {
        track[index] = 'r';
      }
    }

    // Convertimos el array en un string
    const trackString = track.join('');

    // Agregamos la indentaci√≥n + la pista + " /i+1"
    rows.push(' '.repeat(offset) + trackString + ` /${i + 1}`);
  }

  // Unimos todos los carriles con un salto de l√≠nea
  return rows.join('\n');
}


