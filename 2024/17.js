/*
El Grinch ha estado haciendo de las suyas en el Polo Norte y ha sembrado bombas de carbÃ³n explosivo ðŸ’£ en la fÃ¡brica 
de juguetes de los duendes. Quiere que todos los juguetes queden inutilizados y por eso ha dejado una cuadrÃ­cula donde 
algunas celdas tienen carbÃ³n explosivo (true) y otras estÃ¡n vacÃ­as (false).

Los duendes necesitan tu ayuda para mapear las zonas peligrosas. Cada celda vacÃ­a debe mostrar un nÃºmero que indique 
cuÃ¡ntas bombas de carbÃ³n explosivo hay en las posiciones adyacentes, incluidas las diagonales.

detectBombs([
  [true, false, false],
  [false, true, false],
  [false, false, false]
])
[
  [1, 2, 1],
  [2, 1, 1],
  [1, 1, 1]
]

detectBombs([
  [true, false],
  [false, false]
])
[
  [0, 1],
  [1, 1]
]

detectBombs([
  [true, true],
  [false, false],
  [true, true]
])

[
  [1, 1],
  [4, 4],
  [1, 1]
]
Nota: Â¿Quieres una pista? Seguro que has jugado al juego de buscaminas antesâ€¦ ðŸ˜‰
*/

/**
 * Dado un grid booleano, donde true es bomba y false es vacÃ­o,
 * para cada celda se debe indicar cuÃ¡ntas bombas hay en sus
 * celdas vecinas (incluyendo diagonales).
 *
 * @param {boolean[][]} grid - Matriz que indica dÃ³nde hay bombas
 * @returns {number[][]} - Matriz con las cantidades de bombas vecinas
 */
function detectBombs(grid) {
  const rows = grid.length;
  const cols = grid[0].length;
  
  // Creamos una matriz de la misma dimensiÃ³n para almacenar el resultado
  const result = Array.from({ length: rows }, () => Array(cols).fill(0));

  // Movimientos relativos en 8 direcciones (N, NE, E, SE, S, SW, W, NW)
  const directions = [
    [-1, -1], [-1, 0], [-1, 1],
    [ 0, -1],           [ 0, 1],
    [ 1, -1], [ 1, 0], [ 1, 1]
  ];

  for (let r = 0; r < rows; r++) {
    for (let c = 0; c < cols; c++) {
      // Para cada celda, contamos cuÃ¡ntas bombas hay en sus vecinos
      let bombCount = 0;
      for (const [dr, dc] of directions) {
        const nr = r + dr;  // Fila vecina
        const nc = c + dc;  // Columna vecina

        // Verificamos que la posiciÃ³n vecina estÃ© dentro de la matriz
        if (nr >= 0 && nr < rows && nc >= 0 && nc < cols) {
          if (grid[nr][nc] === true) {
            bombCount++;
          }
        }
      }
      result[r][c] = bombCount;
    }
  }

  return result;
}

// Ejemplos de uso:
console.log(detectBombs([
  [true, false, false],
  [false, true, false],
  [false, false, false]
]));
// [
//   [1, 2, 1],
//   [2, 1, 1],
//   [1, 1, 1]
// ]

console.log(detectBombs([
  [true, false],
  [false, false]
]));
// [
//   [0, 1],
//   [1, 1]
// ]

console.log(detectBombs([
  [true, true],
  [false, false],
  [true, true]
]));
// [
//   [1, 1],
//   [4, 4],
//   [1, 1]
// ]

  