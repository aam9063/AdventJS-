/*
Santa Claus üéÖ quiere enmarcar los nombres de los ni√±os buenos para decorar su taller üñºÔ∏è, pero el marco debe 
cumplir unas reglas espec√≠ficas. Tu tarea es ayudar a los elfos a generar este marco m√°gico.

Reglas:

Dado un array de nombres, debes crear un marco rectangular que los contenga a todos.
Cada nombre debe estar en una l√≠nea, alineado a la izquierda.
El marco est√° construido con * y tiene un borde de una l√≠nea de ancho.
La anchura del marco se adapta autom√°ticamente al nombre m√°s largo m√°s un margen de 1 espacio a cada lado.
Ejemplo de funcionamiento:

createFrame(['midu', 'madeval', 'educalvolpz'])

Resultado esperado:
***************
* midu        *
* madeval     *
* educalvolpz *
***************

createFrame(['midu'])

Resultado esperado:
********
* midu *
********

createFrame(['a', 'bb', 'ccc'])

Resultado esperado:
*******
* a   *
* bb  *
* ccc *
*******

createFrame(['a', 'bb', 'ccc', 'dddd'])
*/

/**
 * @param {string[]} names - Array of names to frame
 * @returns {string} The framed names
 */
function createFrame(names) {
    // Si no hay nombres, devolvemos una cadena vac√≠a (o podr√≠amos manejarlo de otra forma)
    if (names.length === 0) return '';
  
    // 1. Encontramos la longitud del nombre m√°s largo
    const maxLen = Math.max(...names.map(name => name.length));
  
    // 2. Creamos la l√≠nea superior e inferior (borde)
    const border = '*'.repeat(maxLen + 4);
  
    // 3. Para cada nombre, generamos una l√≠nea con: "* " + nombre + espacios + " *"
    const framedLines = names.map(name => {
      const spaces = ' '.repeat(maxLen - name.length);
      return `* ${name}${spaces} *`;
    });
  
    // 4. Unimos todo con saltos de l√≠nea y lo retornamos
    return [border, ...framedLines, border].join('\n');
  }
  