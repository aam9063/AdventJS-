/*
Â¡El grinch ðŸ‘¹ ha pasado por el taller de Santa Claus! Y menudo desastre ha montado. Ha cambiado el orden de algunos paquetes, por lo que los envÃ­os no se pueden realizar.

Por suerte, el elfo Pheralb ha detectado el patrÃ³n que ha seguido el grinch para desordenarlos. Nos ha escrito las reglas que debemos seguir para reordenar los paquetes. Las instrucciones que siguen son:

RecibirÃ¡s un string que contiene letras y parÃ©ntesis.
Cada vez que encuentres un par de parÃ©ntesis, debes voltear el contenido dentro de ellos.
Si hay parÃ©ntesis anidados, resuelve primero los mÃ¡s internos.
Devuelve el string resultante con los parÃ©ntesis eliminados, pero con el contenido volteado correctamente.
Nos ha dejado algunos ejemplos:

fixPackages('a(cb)de')
âžž "abcde"
Volteamos "cb" dentro de los parÃ©ntesis

fixPackages('a(bc(def)g)h')
âžž "agdefcbh"
1Âº volteamos "def" â†’ "fed", luego volteamos "bcfedg" â†’ "gdefcb"

fixPackages('abc(def(gh)i)jk')
âžž "abcighfedjk"
1Âº volteamos "gh" â†’ "hg", luego "defhgi" â†’ "ighfed"

fixPackages('a(b(c))e')
âžž "acbe"
1Âº volteamos "c" â†’ "c", luego "bc" â†’ "cb"
*/

/** @param {string} packages with parentheses
 *  @returns {string} Fixed and sorted packages
 */
function fixPackages(packages) {
  // Utilizamos una pila para manejar la estructura de parÃ©ntesis anidados.
  const stack = [''];

  for (const char of packages) {
    if (char === '(') {
      // Cada vez que vemos '(', agregamos un nuevo string vacÃ­o a la pila
      // para empezar a acumular el contenido dentro de estos parÃ©ntesis.
      stack.push('');
    } else if (char === ')') {
      // Cuando encontramos ')', significa que debemos cerrar y voltear
      // el contenido que hay en la parte superior de la pila.
      const top = stack.pop().split('').reverse().join('');
      // Agregamos el contenido invertido a la parte superior actual.
      stack[stack.length - 1] += top;
    } else {
      // Si es un carÃ¡cter normal, lo vamos concatenando a la cima de la pila.
      stack[stack.length - 1] += char;
    }
  }

  // Al finalizar, sÃ³lo deberÃ­a quedar un elemento en la pila con el contenido final.
  return stack[0];
}

